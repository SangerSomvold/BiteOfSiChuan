package com.foomap.util;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.http.entity.mime.content.FileBody;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;
import android.util.Log;

public class CompressImg {
	private static String TAG="CompressImg";
	//bitmap选项
	private static BitmapFactory.Options option = new BitmapFactory.Options();;
	private static SimpleDateFormat df=new SimpleDateFormat("yyyyMMddHHmmss");
	// 压缩文件 存储缩略图 返回 File
	public static File getFile(String imgUrl, int wide, int height) {
		File f = null;
		Bitmap small=getBitmap(imgUrl, wide,height);
		f=new File(loadBitmap(null, small));
		return f;
	}

	// 压缩文件 返回 Bitmap 大小只有大概范围
	public static Bitmap getBitmap(String fileUrl, int wide, int height) {
		Bitmap bitmap_small = null;
		int inSampleSize=1;
		//图片实际宽高
		int imgWide,imgHeight;
		//只返回文件信息
		option.inJustDecodeBounds=true;
		BitmapFactory.decodeFile(fileUrl, option);
		imgHeight=option.outHeight;
		imgWide=option.outWidth;
		//计算压缩比
		if(wide<imgWide || height<imgHeight)
		{
			int heightRatio=Math.round(((float)imgHeight)/((float)height));
			int wideRatio=Math.round(((float)imgWide)/((float)wide));
			inSampleSize=heightRatio<wideRatio?heightRatio:wideRatio;
		}
		option.inSampleSize=inSampleSize;
		Log.i(TAG, "缩放比---> "+inSampleSize);
		//返回实际文件的Bitmap
		option.inJustDecodeBounds=false;
		bitmap_small=BitmapFactory.decodeFile(fileUrl, option);	
		return bitmap_small;
	}

	// 存储bitmap
	public static String loadBitmap(String name,Bitmap bitmap) {
		String path = null;
		//建立图片缓存文件夹
		File sd=Environment.getExternalStorageDirectory();
		File dir=new File(sd.getPath()+"/foodmap/cache/");
		if(!dir.exists())
		{
			dir.mkdirs();
		}
		//获得当前时间 设置文件名
		String dateStr=df.format(new Date());
		if(name==null)
		{
			name="tmp";
		}
		name+=dateStr+".png";
		//保存
		File outFile=new File(dir.getPath(),name);
		try
		{
			FileOutputStream outStream=new FileOutputStream(outFile);
			//再次质量压缩70%
			bitmap.compress(Bitmap.CompressFormat.PNG, 30, outStream);
			outStream.flush();
			//回收
			outStream.close();
			bitmap.recycle();
			path=dir.getPath()+"/"+name;
			Log.i(TAG, "保存成功");
			
		}catch (Exception e)
		{
			e.printStackTrace();
			Log.i(TAG, "存储文件异常!");
		}	
		return path;
	}
	//压缩图片
	public static FileBody getFileBody(String path)
	{
		FileBody body=null;
		body=new FileBody(getFile(path, 480, 400));
		return body;
	}

}
